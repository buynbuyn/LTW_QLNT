// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QLNT.Data;

#nullable disable

namespace QLNT.Migrations
{
    [DbContext(typeof(EFDbContext))]
    [Migration("20250613211528_migration1")]
    partial class migration1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QLNT.models.Cart", b =>
                {
                    b.Property<int>("CartID")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<decimal>("TotalCartPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int?>("UserID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("CartID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("QLNT.models.CartDetail", b =>
                {
                    b.Property<int>("CartID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("CartID", "ProductID");

                    b.HasIndex("ProductID");

                    b.ToTable("CartDetails");
                });

            modelBuilder.Entity("QLNT.models.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryID = 1,
                            Name = "Thuốc điều trị",
                            Order = 1,
                            Status = true
                        },
                        new
                        {
                            CategoryID = 2,
                            Name = "Vitamin & Thực phẩm chức năng",
                            Order = 2,
                            Status = true
                        },
                        new
                        {
                            CategoryID = 3,
                            Name = "Thiết bị y tế",
                            Order = 3,
                            Status = true
                        },
                        new
                        {
                            CategoryID = 4,
                            Name = "Vật dụng cá nhân",
                            Order = 4,
                            Status = true
                        },
                        new
                        {
                            CategoryID = 5,
                            Name = "Chăm sóc da & mỹ phẩm",
                            Order = 5,
                            Status = true
                        });
                });

            modelBuilder.Entity("QLNT.models.Customer", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("CustomerID");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerID = 1,
                            Address = "267 Đường Nguyễn Huệ, Quận 1, TP.HCM",
                            CustomerName = "Nguyễn Văn Trỗi",
                            Email = "troinguyen@gmail.com",
                            Gender = "Nam",
                            PhoneNumber = "0901234567"
                        },
                        new
                        {
                            CustomerID = 2,
                            Address = "41 Phạm Văn Hai, Tân Bình, TP.HCM",
                            CustomerName = "Trần Thị Tuyết Mai",
                            Email = "maitran@gmail.com",
                            Gender = "Nữ",
                            PhoneNumber = "0937654321"
                        },
                        new
                        {
                            CustomerID = 3,
                            Address = "68 Nơ Trang Long, Quận Bình Thạnh, TP.HCM",
                            CustomerName = "Lê Tấn Lộc",
                            Email = "locle@gmail.com",
                            Gender = "Nam",
                            PhoneNumber = "0912345678"
                        },
                        new
                        {
                            CustomerID = 4,
                            Address = "620 Huỳnh Tấn Phát, Quận 7, TP.HCM",
                            CustomerName = "Phạm Thanh Bình",
                            Email = "binhpham@gmail.com",
                            Gender = "Nữ",
                            PhoneNumber = "0978123456"
                        },
                        new
                        {
                            CustomerID = 5,
                            Address = "186 Lê Văn Sỹ, Quận Tân Bình, TP.HCM",
                            CustomerName = "Đặng Quang Huy",
                            Email = "huydang@gmail.com",
                            Gender = "Nam",
                            PhoneNumber = "0945678912"
                        },
                        new
                        {
                            CustomerID = 6,
                            Address = "40 Đường Tân Vĩnh, Quận 4, TP.HCM",
                            CustomerName = "Bùi Phương Linh",
                            Email = "linhbui@gmail.com",
                            Gender = "Nữ",
                            PhoneNumber = "0998765432"
                        },
                        new
                        {
                            CustomerID = 7,
                            Address = "147 Đường Nguyễn Kiệm, Quận Phú Nhuận, TP.HCM",
                            CustomerName = "Hoàng Gia Bảo",
                            Email = "hoangbao@gmail.com",
                            Gender = "Nam",
                            PhoneNumber = "0954321789"
                        },
                        new
                        {
                            CustomerID = 8,
                            Address = "258 Lê Đình Cẩn, Quận Bình Tân, TP.HCM",
                            CustomerName = "Vũ Minh Anh",
                            Email = "vuanh@gmail.com",
                            Gender = "Nữ",
                            PhoneNumber = "0912348765"
                        },
                        new
                        {
                            CustomerID = 9,
                            Address = "369 Đường Trần Não, Quận 2, TP.HCM",
                            CustomerName = "Trịnh Minh Khoa",
                            Email = "trinhkhoa@gmail.com",
                            Gender = "Nam",
                            PhoneNumber = "0987651234"
                        },
                        new
                        {
                            CustomerID = 10,
                            Address = "741 Đường Mạc Thiên Tích, Quận 5, TP.HCM",
                            CustomerName = "Mai Tuyết Nhi",
                            Email = "mainhi@gmail.com",
                            Gender = "Nữ",
                            PhoneNumber = "0965432871"
                        });
                });

            modelBuilder.Entity("QLNT.models.Employee", b =>
                {
                    b.Property<int>("EmployeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeID"));

                    b.Property<string>("EmailEmployee")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("EmployeeID");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            EmployeeID = 1,
                            EmailEmployee = "kiettran@gmail.com",
                            EmployeeName = "Trần Diệp Anh Kiệt",
                            Gender = "Nam",
                            HireDate = new DateTime(2024, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhoneNumber = "0901234567",
                            Position = "Quản lý",
                            Salary = 20000000m
                        },
                        new
                        {
                            EmployeeID = 2,
                            EmailEmployee = "vuphung@gmail.com",
                            EmployeeName = "Phùng Minh Vũ",
                            Gender = "Nam",
                            HireDate = new DateTime(2024, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhoneNumber = "0937654321",
                            Position = "Giám sát ca",
                            Salary = 18000000m
                        },
                        new
                        {
                            EmployeeID = 3,
                            EmailEmployee = "leminh@gmail.com",
                            EmployeeName = "Lê Nhật Minh",
                            Gender = "Nam",
                            HireDate = new DateTime(2024, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhoneNumber = "0912345678",
                            Position = "Nhân viên",
                            Salary = 15000000m
                        },
                        new
                        {
                            EmployeeID = 4,
                            EmailEmployee = "phamchi@gmail.com",
                            EmployeeName = "Phạm Mai Chi",
                            Gender = "Nữ",
                            HireDate = new DateTime(2024, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhoneNumber = "0978123456",
                            Position = "Nhân viên",
                            Salary = 15000000m
                        },
                        new
                        {
                            EmployeeID = 5,
                            EmailEmployee = "dangnam@gmail.com",
                            EmployeeName = "Đặng Nhật Quang",
                            Gender = "Nam",
                            HireDate = new DateTime(2025, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhoneNumber = "0945678912",
                            Position = "Nhân viên",
                            Salary = 15000000m
                        },
                        new
                        {
                            EmployeeID = 6,
                            EmailEmployee = "buitrang@gmail.com",
                            EmployeeName = "Bùi Thị Thùy Trang",
                            Gender = "Nữ",
                            HireDate = new DateTime(2025, 3, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhoneNumber = "0998765432",
                            Position = "Nhân viên",
                            Salary = 15000000m
                        });
                });

            modelBuilder.Entity("QLNT.models.Manufacturer", b =>
                {
                    b.Property<int>("ManufacturerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ManufacturerID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ManufacturerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("ManufacturerID");

                    b.ToTable("Manufacturers");

                    b.HasData(
                        new
                        {
                            ManufacturerID = 1,
                            Address = "123 Đường ABC, Quận 1, TP.HCM",
                            Email = "contact@duocphamvn.com",
                            ManufacturerName = "Công ty Dược phẩm Việt Nam",
                            PhoneNumber = "0901234567"
                        },
                        new
                        {
                            ManufacturerID = 2,
                            Address = "456 Đường XYZ, Quận 3, TP.HCM",
                            Email = "info@dongyvn.com",
                            ManufacturerName = "Nhà thuốc Đông Y Truyền Thống",
                            PhoneNumber = "0937654321"
                        },
                        new
                        {
                            ManufacturerID = 3,
                            Address = "789 Đường MNO, Quận Bình Thạnh, TP.HCM",
                            Email = "support@duocphaminternational.com",
                            ManufacturerName = "Công ty Dược phẩm Quốc Tế",
                            PhoneNumber = "0912345678"
                        },
                        new
                        {
                            ManufacturerID = 4,
                            Address = "321 Đường PQR, Quận 7, TP.HCM",
                            Email = "info@myphamthiennhien.com",
                            ManufacturerName = "Công ty Mỹ phẩm Thiên Nhiên",
                            PhoneNumber = "0978123456"
                        },
                        new
                        {
                            ManufacturerID = 5,
                            Address = "654 Đường STU, Quận Tân Bình, TP.HCM",
                            Email = "contact@thietbiyte.com",
                            ManufacturerName = "Nhà máy Sản xuất Thiết bị Y Tế",
                            PhoneNumber = "0945678912"
                        },
                        new
                        {
                            ManufacturerID = 6,
                            Address = "987 Đường UVW, Quận 5, TP.HCM",
                            Email = "support@vitaminTPCN.com",
                            ManufacturerName = "Công ty Sản xuất Vitamin & TPCN",
                            PhoneNumber = "0987654321"
                        },
                        new
                        {
                            ManufacturerID = 7,
                            Address = "741 Đường XYZ, Quận 10, TP.HCM",
                            Email = "info@duocphamdongduong.com",
                            ManufacturerName = "Công ty TNHH Dược phẩm Đông Dương",
                            PhoneNumber = "0976543210"
                        },
                        new
                        {
                            ManufacturerID = 8,
                            Address = "852 Đường RST, Quận Gò Vấp, TP.HCM",
                            Email = "contact@duocphamquocgia.com",
                            ManufacturerName = "Tập đoàn Dược phẩm Quốc Gia",
                            PhoneNumber = "0965432189"
                        },
                        new
                        {
                            ManufacturerID = 9,
                            Address = "963 Đường LMN, Quận 2, TP.HCM",
                            Email = "info@myphamcaocap.com",
                            ManufacturerName = "Nhà máy Sản xuất Mỹ phẩm Cao Cấp",
                            PhoneNumber = "0954321897"
                        },
                        new
                        {
                            ManufacturerID = 10,
                            Address = "159 Đường OPQ, Quận 9, TP.HCM",
                            Email = "support@duocphamankhang.com",
                            ManufacturerName = "Công ty TNHH Dược phẩm An Khang",
                            PhoneNumber = "0943216789"
                        });
                });

            modelBuilder.Entity("QLNT.models.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderID"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("OrderID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("UserID");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            OrderID = 1,
                            Amount = 500000m,
                            CustomerID = 1,
                            OrderDate = new DateTime(2025, 6, 1, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = "Đã thanh toán",
                            UserID = 2
                        },
                        new
                        {
                            OrderID = 2,
                            Amount = 750000m,
                            CustomerID = 3,
                            OrderDate = new DateTime(2025, 6, 2, 10, 15, 0, 0, DateTimeKind.Unspecified),
                            Status = "Chờ xử lý",
                            UserID = 1
                        },
                        new
                        {
                            OrderID = 3,
                            Amount = 300000m,
                            CustomerID = 2,
                            OrderDate = new DateTime(2025, 6, 3, 18, 45, 0, 0, DateTimeKind.Unspecified),
                            Status = "Đang giao",
                            UserID = 2
                        },
                        new
                        {
                            OrderID = 4,
                            Amount = 900000m,
                            CustomerID = 4,
                            OrderDate = new DateTime(2025, 6, 4, 12, 10, 0, 0, DateTimeKind.Unspecified),
                            Status = "Đã hủy",
                            UserID = 3
                        },
                        new
                        {
                            OrderID = 5,
                            Amount = 450000m,
                            CustomerID = 5,
                            OrderDate = new DateTime(2025, 6, 5, 9, 5, 0, 0, DateTimeKind.Unspecified),
                            Status = "Hoàn tất",
                            UserID = 1
                        });
                });

            modelBuilder.Entity("QLNT.models.OrderDetail", b =>
                {
                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("QuantityOrder")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("OrderID", "ProductID");

                    b.HasIndex("ProductID");

                    b.ToTable("OrderDetails");

                    b.HasData(
                        new
                        {
                            OrderID = 1,
                            ProductID = 1,
                            PaymentMethod = "Cash",
                            QuantityOrder = 2,
                            UnitPrice = 150000m
                        },
                        new
                        {
                            OrderID = 1,
                            ProductID = 5,
                            PaymentMethod = "Cash",
                            QuantityOrder = 1,
                            UnitPrice = 200000m
                        },
                        new
                        {
                            OrderID = 2,
                            ProductID = 3,
                            PaymentMethod = "Credit Card",
                            QuantityOrder = 3,
                            UnitPrice = 130000m
                        },
                        new
                        {
                            OrderID = 2,
                            ProductID = 7,
                            PaymentMethod = "Credit Card",
                            QuantityOrder = 2,
                            UnitPrice = 200000m
                        },
                        new
                        {
                            OrderID = 3,
                            ProductID = 2,
                            PaymentMethod = "Bank Transfer",
                            QuantityOrder = 1,
                            UnitPrice = 120000m
                        },
                        new
                        {
                            OrderID = 3,
                            ProductID = 9,
                            PaymentMethod = "Bank Transfer",
                            QuantityOrder = 5,
                            UnitPrice = 90000m
                        },
                        new
                        {
                            OrderID = 4,
                            ProductID = 4,
                            PaymentMethod = "Cash",
                            QuantityOrder = 2,
                            UnitPrice = 180000m
                        },
                        new
                        {
                            OrderID = 4,
                            ProductID = 8,
                            PaymentMethod = "Cash",
                            QuantityOrder = 1,
                            UnitPrice = 250000m
                        },
                        new
                        {
                            OrderID = 5,
                            ProductID = 6,
                            PaymentMethod = "Credit Card",
                            QuantityOrder = 4,
                            UnitPrice = 75000m
                        },
                        new
                        {
                            OrderID = 5,
                            ProductID = 10,
                            PaymentMethod = "Credit Card",
                            QuantityOrder = 3,
                            UnitPrice = 110000m
                        });
                });

            modelBuilder.Entity("QLNT.models.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductID"));

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ManufactureID")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("ProductImage")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("ProductID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("ManufactureID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductID = 1,
                            CategoryID = 1,
                            Dosage = "500mg",
                            ManufactureID = 1,
                            Price = 150000m,
                            ProductImage = "paracetamol.jpg",
                            ProductName = "Paracetamol",
                            Unit = "Hộp"
                        },
                        new
                        {
                            ProductID = 2,
                            CategoryID = 1,
                            Dosage = "500mg",
                            ManufactureID = 2,
                            Price = 120000m,
                            ProductImage = "amoxicillin.jpg",
                            ProductName = "Amoxicillin",
                            Unit = "Hộp"
                        },
                        new
                        {
                            ProductID = 3,
                            CategoryID = 1,
                            Dosage = "400mg",
                            ManufactureID = 3,
                            Price = 130000m,
                            ProductImage = "ibuprofen.jpg",
                            ProductName = "Ibuprofen",
                            Unit = "Hộp"
                        },
                        new
                        {
                            ProductID = 4,
                            CategoryID = 1,
                            Dosage = "850mg",
                            ManufactureID = 4,
                            Price = 180000m,
                            ProductImage = "metformin.jpg",
                            ProductName = "Metformin",
                            Unit = "Hộp"
                        },
                        new
                        {
                            ProductID = 5,
                            CategoryID = 1,
                            Dosage = "500mg",
                            ManufactureID = 5,
                            Price = 200000m,
                            ProductImage = "ciprofloxacin.jpg",
                            ProductName = "Ciprofloxacin",
                            Unit = "Hộp"
                        },
                        new
                        {
                            ProductID = 6,
                            CategoryID = 2,
                            Dosage = "250mg",
                            ManufactureID = 6,
                            Price = 75000m,
                            ProductImage = "vitaminC.jpg",
                            ProductName = "Vitamin C",
                            Unit = "Chai"
                        },
                        new
                        {
                            ProductID = 7,
                            CategoryID = 2,
                            Dosage = "1000mg",
                            ManufactureID = 7,
                            Price = 200000m,
                            ProductImage = "omega3.jpg",
                            ProductName = "Omega-3 Dầu Cá",
                            Unit = "Lọ"
                        },
                        new
                        {
                            ProductID = 8,
                            CategoryID = 2,
                            Dosage = "5000mg",
                            ManufactureID = 8,
                            Price = 250000m,
                            ProductImage = "collagen.jpg",
                            ProductName = "Collagen Peptide",
                            Unit = "Hộp"
                        },
                        new
                        {
                            ProductID = 9,
                            CategoryID = 2,
                            Dosage = "50mg",
                            ManufactureID = 9,
                            Price = 90000m,
                            ProductImage = "zinc.jpg",
                            ProductName = "Kẽm Gluconate",
                            Unit = "Hộp"
                        },
                        new
                        {
                            ProductID = 10,
                            CategoryID = 2,
                            Dosage = "100mg",
                            ManufactureID = 10,
                            Price = 110000m,
                            ProductImage = "magieB6.jpg",
                            ProductName = "Magie B6",
                            Unit = "Hộp"
                        },
                        new
                        {
                            ProductID = 11,
                            CategoryID = 3,
                            Dosage = "Model XYZ",
                            ManufactureID = 1,
                            Price = 500000m,
                            ProductImage = "maydo.jpg",
                            ProductName = "Máy đo huyết áp",
                            Unit = "Chiếc"
                        },
                        new
                        {
                            ProductID = 12,
                            CategoryID = 3,
                            Dosage = "Model ABC",
                            ManufactureID = 2,
                            Price = 120000m,
                            ProductImage = "nhietke.jpg",
                            ProductName = "Nhiệt kế điện tử",
                            Unit = "Chiếc"
                        },
                        new
                        {
                            ProductID = 13,
                            CategoryID = 3,
                            Dosage = "Model DEF",
                            ManufactureID = 3,
                            Price = 550000m,
                            ProductImage = "duonghuyet.jpg",
                            ProductName = "Máy đo đường huyết",
                            Unit = "Chiếc"
                        },
                        new
                        {
                            ProductID = 14,
                            CategoryID = 3,
                            Dosage = "Model KLM",
                            ManufactureID = 4,
                            Price = 200000m,
                            ProductImage = "ongnghe.jpg",
                            ProductName = "Ống nghe y tế",
                            Unit = "Chiếc"
                        },
                        new
                        {
                            ProductID = 15,
                            CategoryID = 3,
                            Dosage = "50 miếng",
                            ManufactureID = 5,
                            Price = 80000m,
                            ProductImage = "banggac.jpg",
                            ProductName = "Băng gạc y tế",
                            Unit = "Hộp"
                        },
                        new
                        {
                            ProductID = 16,
                            CategoryID = 4,
                            Dosage = "250ml",
                            ManufactureID = 6,
                            Price = 65000m,
                            ProductImage = "gelruatay.jpg",
                            ProductName = "Gel rửa tay kháng khuẩn",
                            Unit = "Chai"
                        },
                        new
                        {
                            ProductID = 17,
                            CategoryID = 4,
                            Dosage = "30ml",
                            ManufactureID = 7,
                            Price = 50000m,
                            ProductImage = "daugioxanh.jpg",
                            ProductName = "Dầu gió xanh",
                            Unit = "Chai"
                        },
                        new
                        {
                            ProductID = 18,
                            CategoryID = 4,
                            Dosage = "50 cái",
                            ManufactureID = 8,
                            Price = 100000m,
                            ProductImage = "khautrang.jpg",
                            ProductName = "Khẩu trang y tế",
                            Unit = "Hộp"
                        },
                        new
                        {
                            ProductID = 19,
                            CategoryID = 4,
                            Dosage = "100 miếng",
                            ManufactureID = 9,
                            Price = 40000m,
                            ProductImage = "bongtaytrang.jpg",
                            ProductName = "Bông tẩy trang",
                            Unit = "Hộp"
                        },
                        new
                        {
                            ProductID = 20,
                            CategoryID = 4,
                            Dosage = "500ml",
                            ManufactureID = 10,
                            Price = 90000m,
                            ProductImage = "nuocsucmieng.jpg",
                            ProductName = "Nước súc miệng sát khuẩn",
                            Unit = "Chai"
                        },
                        new
                        {
                            ProductID = 21,
                            CategoryID = 5,
                            Dosage = "50g",
                            ManufactureID = 1,
                            Price = 180000m,
                            ProductImage = "kemchongnang.jpg",
                            ProductName = "Kem chống nắng SPF50+",
                            Unit = "Tuýp"
                        },
                        new
                        {
                            ProductID = 22,
                            CategoryID = 5,
                            Dosage = "150ml",
                            ManufactureID = 2,
                            Price = 200000m,
                            ProductImage = "suaruamat.jpg",
                            ProductName = "Sữa rửa mặt dịu nhẹ",
                            Unit = "Chai"
                        },
                        new
                        {
                            ProductID = 23,
                            CategoryID = 5,
                            Dosage = "5 miếng",
                            ManufactureID = 3,
                            Price = 120000m,
                            ProductImage = "matna.jpg",
                            ProductName = "Mặt nạ dưỡng da",
                            Unit = "Hộp"
                        },
                        new
                        {
                            ProductID = 24,
                            CategoryID = 5,
                            Dosage = "30ml",
                            ManufactureID = 4,
                            Price = 350000m,
                            ProductImage = "tinhchatduongtrang.jpg",
                            ProductName = "Tinh chất dưỡng trắng",
                            Unit = "Chai"
                        },
                        new
                        {
                            ProductID = 25,
                            CategoryID = 5,
                            Dosage = "50ml",
                            ManufactureID = 5,
                            Price = 400000m,
                            ProductImage = "serum.jpg",
                            ProductName = "Serum chống lão hóa",
                            Unit = "Chai"
                        });
                });

            modelBuilder.Entity("QLNT.models.ProductDetail", b =>
                {
                    b.Property<int>("ProductDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductDetailID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.HasKey("ProductDetailID");

                    b.HasIndex("ProductID");

                    b.ToTable("ProductDetails");

                    b.HasData(
                        new
                        {
                            ProductDetailID = 1,
                            Description = "Thuốc giảm đau, hạ sốt Paracetamol 500mg.",
                            ExpirationDate = new DateTime(2026, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductID = 1,
                            StockQuantity = 100
                        },
                        new
                        {
                            ProductDetailID = 2,
                            Description = "Kháng sinh Amoxicillin 500mg, dùng để điều trị nhiễm khuẩn.",
                            ExpirationDate = new DateTime(2027, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductID = 2,
                            StockQuantity = 80
                        },
                        new
                        {
                            ProductDetailID = 3,
                            Description = "Thuốc chống viêm, giảm đau Ibuprofen 400mg.",
                            ExpirationDate = new DateTime(2025, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductID = 3,
                            StockQuantity = 120
                        },
                        new
                        {
                            ProductDetailID = 4,
                            Description = "Thuốc trị tiểu đường Metformin 850mg.",
                            ExpirationDate = new DateTime(2026, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductID = 4,
                            StockQuantity = 90
                        },
                        new
                        {
                            ProductDetailID = 5,
                            Description = "Kháng sinh Ciprofloxacin 500mg điều trị nhiễm trùng đường tiết niệu.",
                            ExpirationDate = new DateTime(2027, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductID = 5,
                            StockQuantity = 60
                        },
                        new
                        {
                            ProductDetailID = 6,
                            Description = "Viên uống Vitamin C giúp tăng cường hệ miễn dịch.",
                            ExpirationDate = new DateTime(2026, 4, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductID = 6,
                            StockQuantity = 150
                        },
                        new
                        {
                            ProductDetailID = 7,
                            Description = "Viên uống dầu cá Omega-3 giúp hỗ trợ tim mạch.",
                            ExpirationDate = new DateTime(2028, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductID = 7,
                            StockQuantity = 70
                        },
                        new
                        {
                            ProductDetailID = 8,
                            Description = "Collagen Peptide giúp làm đẹp da và tăng độ đàn hồi.",
                            ExpirationDate = new DateTime(2026, 7, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductID = 8,
                            StockQuantity = 50
                        },
                        new
                        {
                            ProductDetailID = 9,
                            Description = "Viên uống kẽm giúp tăng cường sức đề kháng và hỗ trợ da.",
                            ExpirationDate = new DateTime(2027, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductID = 9,
                            StockQuantity = 90
                        },
                        new
                        {
                            ProductDetailID = 10,
                            Description = "Magie B6 giúp hỗ trợ thần kinh và giảm căng thẳng.",
                            ExpirationDate = new DateTime(2025, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductID = 10,
                            StockQuantity = 100
                        },
                        new
                        {
                            ProductDetailID = 11,
                            Description = "Máy đo huyết áp điện tử Model XYZ, tiện lợi và chính xác cao.",
                            ExpirationDate = new DateTime(2028, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductID = 11,
                            StockQuantity = 50
                        },
                        new
                        {
                            ProductDetailID = 12,
                            Description = "Nhiệt kế điện tử Model ABC, đo nhanh và chuẩn xác.",
                            ExpirationDate = new DateTime(2027, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductID = 12,
                            StockQuantity = 100
                        },
                        new
                        {
                            ProductDetailID = 13,
                            Description = "Máy đo đường huyết Model DEF dành cho người bị tiểu đường.",
                            ExpirationDate = new DateTime(2029, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductID = 13,
                            StockQuantity = 40
                        },
                        new
                        {
                            ProductDetailID = 14,
                            Description = "Ống nghe y tế Model KLM, giúp bác sĩ chuẩn đoán bệnh chính xác.",
                            ExpirationDate = new DateTime(2026, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductID = 14,
                            StockQuantity = 75
                        },
                        new
                        {
                            ProductDetailID = 15,
                            Description = "Băng gạc y tế 50 miếng, cần thiết trong sơ cứu và y tế.",
                            ExpirationDate = new DateTime(2025, 7, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductID = 15,
                            StockQuantity = 200
                        },
                        new
                        {
                            ProductDetailID = 16,
                            Description = "Gel rửa tay kháng khuẩn 250ml, giúp diệt khuẩn hiệu quả.",
                            ExpirationDate = new DateTime(2025, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductID = 16,
                            StockQuantity = 300
                        },
                        new
                        {
                            ProductDetailID = 17,
                            Description = "Dầu gió xanh 30ml, giảm đau và thư giãn cơ bắp.",
                            ExpirationDate = new DateTime(2027, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductID = 17,
                            StockQuantity = 150
                        },
                        new
                        {
                            ProductDetailID = 18,
                            Description = "Khẩu trang y tế 50 cái, bảo vệ sức khỏe mỗi ngày.",
                            ExpirationDate = new DateTime(2026, 2, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductID = 18,
                            StockQuantity = 500
                        },
                        new
                        {
                            ProductDetailID = 19,
                            Description = "Bông tẩy trang 100 miếng, mềm mịn và an toàn cho da.",
                            ExpirationDate = new DateTime(2027, 4, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductID = 19,
                            StockQuantity = 250
                        },
                        new
                        {
                            ProductDetailID = 20,
                            Description = "Nước súc miệng sát khuẩn 500ml, giúp bảo vệ răng miệng.",
                            ExpirationDate = new DateTime(2026, 10, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductID = 20,
                            StockQuantity = 100
                        },
                        new
                        {
                            ProductDetailID = 21,
                            Description = "Kem chống nắng SPF50+, bảo vệ da khỏi tia UV.",
                            ExpirationDate = new DateTime(2027, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductID = 21,
                            StockQuantity = 80
                        },
                        new
                        {
                            ProductDetailID = 22,
                            Description = "Sữa rửa mặt dịu nhẹ 150ml, giúp làm sạch sâu.",
                            ExpirationDate = new DateTime(2026, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductID = 22,
                            StockQuantity = 120
                        },
                        new
                        {
                            ProductDetailID = 23,
                            Description = "Mặt nạ dưỡng da 5 miếng, cấp ẩm và làm sáng da.",
                            ExpirationDate = new DateTime(2025, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductID = 23,
                            StockQuantity = 200
                        },
                        new
                        {
                            ProductDetailID = 24,
                            Description = "Tinh chất dưỡng trắng 30ml, giúp làm đều màu da.",
                            ExpirationDate = new DateTime(2026, 5, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductID = 24,
                            StockQuantity = 60
                        },
                        new
                        {
                            ProductDetailID = 25,
                            Description = "Serum chống lão hóa 50ml, giúp giảm nếp nhăn và trẻ hóa da.",
                            ExpirationDate = new DateTime(2028, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductID = 25,
                            StockQuantity = 90
                        });
                });

            modelBuilder.Entity("QLNT.models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("UserID");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserID = 1,
                            Email = "uyenle@gmail.com",
                            FullName = "Lê Phạm Bảo Uyên",
                            Password = "admin1",
                            Role = "2",
                            Status = true,
                            UserName = "admin1"
                        },
                        new
                        {
                            UserID = 2,
                            Email = "kienpham@gmail.com",
                            FullName = "Phạm Hữu Kiên",
                            Password = "admin2",
                            Role = "2",
                            Status = true,
                            UserName = "admin2"
                        },
                        new
                        {
                            UserID = 3,
                            Email = "huynhnguyen@gmail.com",
                            FullName = "Nguyễn Hoàng Huynh",
                            Password = "admin3",
                            Role = "2",
                            Status = true,
                            UserName = "admin3"
                        },
                        new
                        {
                            UserID = 4,
                            Email = "kiettran@gmail.com",
                            FullName = "Trần Diệp Anh Kiệt",
                            Password = "employee1",
                            Role = "1",
                            Status = true,
                            UserName = "employee1"
                        },
                        new
                        {
                            UserID = 5,
                            Email = "vuphung@gmail.com",
                            FullName = "Phùng Minh Vũ",
                            Password = "employee2",
                            Role = "1",
                            Status = true,
                            UserName = "employee2"
                        });
                });

            modelBuilder.Entity("QLNT.models.Cart", b =>
                {
                    b.HasOne("QLNT.models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QLNT.models.User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("QLNT.models.Cart", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QLNT.models.CartDetail", b =>
                {
                    b.HasOne("QLNT.models.Cart", null)
                        .WithMany("CartDetails")
                        .HasForeignKey("CartID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QLNT.models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("QLNT.models.Order", b =>
                {
                    b.HasOne("QLNT.models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QLNT.models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QLNT.models.OrderDetail", b =>
                {
                    b.HasOne("QLNT.models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QLNT.models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("QLNT.models.Product", b =>
                {
                    b.HasOne("QLNT.models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QLNT.models.Manufacturer", "Manufacturer")
                        .WithMany("Products")
                        .HasForeignKey("ManufactureID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("QLNT.models.ProductDetail", b =>
                {
                    b.HasOne("QLNT.models.Product", "Product")
                        .WithMany("ProductDetails")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("QLNT.models.Cart", b =>
                {
                    b.Navigation("CartDetails");
                });

            modelBuilder.Entity("QLNT.models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("QLNT.models.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("QLNT.models.Manufacturer", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("QLNT.models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("QLNT.models.Product", b =>
                {
                    b.Navigation("ProductDetails");
                });

            modelBuilder.Entity("QLNT.models.User", b =>
                {
                    b.Navigation("Cart");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
